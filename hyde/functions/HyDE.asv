function [raw,len,growth_rate] = HyDE(input_directory, save_directory, assay, tag, analysis_type, writeoptions)
% HYpocotyl Determining Engine
%Assay:
%1 - start time
%2 - treat time
%3 - end time
%4 - time step (#minutes/frame)
%5 - frame step (#frames/step)
%6 - pixels/mm
%
%Write Options
%1 - Raw Length Text file
%2 - Smooth Length Text File
%3 - Growth Rate File
%4 - Movie file
%Get directory information, initialize assay parameters

raw = NaN;
len = NaN;
growth_rate = NaN;

starttime = assay(1) - assay(2);
endtime = assay(3) - assay(2);
timestep = assay(4);
framestep = assay(5);
timevector = starttime:timestep*framestep:endtime;
i = 1;
if(analysis_type == 1)
  if(~exist(input_directory)) return; end;
  cd(input_directory);
  [pathstr, seedling_directory] = fileparts(pwd);
  dataname = sprintf('%s_%s', tag, seedling_directory);
  
  %process movie, store as a movie object file.  If the algorithm is
  %unable to compute a movie, skip this directory and move on.
  movobj = process_movie('*.tif', framestep, timevector, dataname, assay(6));
  if(isnan(movobj) || ~movobj)
    cd ../;
    return;
  end;
  moviefilename = sprintf('%s.avi',dataname);
  datafilename = sprintf('%s.csv',dataname);
  if(writeoptions(4)) movobj.write_movie(moviefilename); end;%write out movie as an avi file
  i = i+1;
  cd ../
  datamatrix = cell(length(timevector)+1,4);
  datamatrix{1,1} = 'Time (min)';
  datamatrix{1,2} = 'Raw Length (mm)';
  datamatrix{1,3} = 'Smoothed Length (mm)';
  datamatrix{1,4} = 'Growth Rate (mm)';
  
  %Get movie object data (moviedata[imagenumber, value] where value(1) is
  %the time vector, value(2) is the raw length, value(3) is the
  %spline-smoothened length, and value(4) is the derivitive of value (3
  moviedata = movobj.get_data;
  datamatrix(2:length(timevector)+1,1) = num2cell(timevector);
  datamatrix(2:length(timevector)+1,2) = num2cell(moviedata(:,4));
  datamatrix(2:length(timevector)+1,3) = num2cell(moviedata(:,2));
  datamatrix(2:length(timevector)+1,4) = num2cell(moviedata(:,3));
  if(writeoptions(1)) cellwrite(datafilename,datamatrix); end
  raw = movobj.get_data;
end
if(analysis_type == 2)
  %loop through plate directories
  averagelenvec = NaN(length(timevector),2);
  averagegrvec = NaN(length(timevector),2);
  averagerawvec = NaN(length(timevector),2);
  genotype_directory = input_directory;
  data = hypocotylmovie();
  if(~exist(genotype_directory,'dir'))
    return;
  end;
  plate_directories = dir(genotype_directory);
  plate_directories = plate_directories([plate_directories.isdir]);
  cd(genotype_directory);
  [xpath,genotype_name] = fileparts(pwd);
  if(isempty(save_directory)) 
    save_directory = [pwd,'/'];
  else
    save_directory=[save_directory,'/'];
  end;
  for d1=3:length(plate_directories)
    plate_directory = plate_directories(d1).name;
    plate_name = plate_directory;
    seedling_directories = dir(plate_directory);
    seedling_directories = seedling_directories([seedling_directories.isdir]);
    cd(plate_directory);
    %loop through seedling directories within each plate directory
    for d2=3:length(seedling_directories)
      seedling_directory = seedling_directories(d2).name;
      seedling_name = seedling_directory;
      cd(seedling_directory);
      dataname = sprintf('%s_%s-%s-%s', tag, genotype_name, plate_name, seedling_name);
      
      %process movie, store as a movie object file.  If the algorithm is
      %unable to compute a movie, skip this directory and move on.
      movobj = process_movie('*.tif', framestep, timevector, dataname, assay(6));
      if(isnan(movobj) || ~movobj)
        cd ../;
        continue;
      end;
      
      data(i) = movobj; %data structure with all movie information
      moviefilename = sprintf('%s/%s.avi',save_directory,dataname);
      if(writeoptions(4)) data(i).write_movie(moviefilename); end; %write out movie as an avi file
      i = i+1;
      cd ../
    end
    cd ../;
  end
  cd ../;
  
  %Initialize analysis matrices, len, growth_rate, and raw
  len = cell(length(timevector)+1,size(data,2)+1);
  len{1,1} = 'Time (min)';
  len(2:length(timevector)+1,1) = num2cell(timevector);
  growth_rate = cell(length(timevector)+1,size(data,2)+1);
  growth_rate{1,1} = 'Time (min)';
  growth_rate(2:length(timevector)+1,1) = num2cell(timevector);
  raw = cell(length(timevector)+1,size(data,2)+1);
  raw{1,1} = 'Time (min)';
  raw(2:length(timevector)+1,1) = num2cell(timevector);
  
  %store data in each directory from each movie object
  for i=2:length(data)+1
    matrix = data(i-1).get_data;
    if(isnan(data(i-1)))
      continue;
    end;
    len(2:length(matrix(:,2))+1,i) = num2cell(matrix(:,2));
    len(1,i) = cellstr(data(i-1).id);
    growth_rate(2:length(matrix(:,3))+1,i) = num2cell(matrix(:,3));
    growth_rate(1,i) = cellstr(data(i-1).id);
    raw(2:length(matrix(:,4))+1,i) = num2cell(matrix(:,4));
    raw(1,i) = cellstr(data(i-1).id);
  end
  
  %compute summary statistics on combined movie objects, mean and stderr
  for i=1:length(timevector)
    averagerawvec(i,1) = timevector(i);
    averagelenvec(i,1) = timevector(i);
    averagegrvec(i,1) = timevector(i);
    averagerawvec(i,2) = nanmean([raw{i+1,2:size(data,2)+1}]);
    averagelenvec(i,2) = nanmean([len{i+1,2:size(data,2)+1}]);
    averagegrvec(i,2) = nanmean([growth_rate{i+1,2:size(data,2)+1}]);
    averagerawvec(i,3) = nanstd([raw{i+1,2:size(data,2)+1}])/sqrt(size(data,2));
    averagelenvec(i,3) = nanstd([len{i+1,2:size(data,2)+1}])/sqrt(size(data,2));
    averagegrvec(i,3) = nanstd([growth_rate{i+1,2:size(data,2)+1}])/sqrt(size(data,2));
  end
  rawdataname = [save_directory,tag,'_',genotype_name,'_raw.csv'];
  lendataname = [save_directory,tag,'_',genotype_name,'_len.csv'];
  grdataname = [save_directory,tag,'_',genotype_name,'_gr.csv'];
  if(writeoptions(1)) cellwrite(rawdataname,raw); end
  if(writeoptions(2)) cellwrite(lendataname,len); end
  if(writeoptions(3)) cellwrite(grdataname,growth_rate); end
  raw = averagerawvec;
  len = genotype_name;
  
end
if(analysis_type == 3)
  assay_directory = input_directory;
  genotype_directories = dir(assay_directory);
  genotype_directories = genotype_directories([genotype_directories.isdir]);
  cd(assay_directory);
  if(isempty(save_directory)) save_directory = pwd; end
  average = NaN(length(timevector),length(genotype_directories)-1);
  stderr = NaN(length(timevector),length(genotype_directories)-1);
  names = cell(length(genotype_directories)-2,1);
  for d0=3:length(genotype_directories)
    data = hypocotylmovie();
    i=1;
    genotype_directory = genotype_directories(d0).name;
    names{d0-2} = genotype_directory;
    plate_directories = dir(genotype_directory);
    plate_directories = plate_directories([plate_directories.isdir]);
    cd(genotype_directory);
    genotype_name = genotype_directory;
    %loop through plate directories
    for d1=3:length(plate_directories)
      plate_directory = plate_directories(d1).name;
      plate_name = plate_directory;
      seedling_directories = dir(plate_directory);
      seedling_directories = seedling_directories([seedling_directories.isdir]);
      cd(plate_directory);
      %loop through seedling directories within each plate directory
      for d2=3:length(seedling_directories)
        seedling_directory = seedling_directories(d2).name;
        seedling_name = seedling_directory;
        cd(seedling_directory);
        dataname = sprintf('%s_%s-%s-%s', tag, genotype_name, plate_name, seedling_name);
        
        %process movie, store as a movie object file.  If the algorithm is
        %unable to compute a movie, skip this directory and move on.
        movobj = process_movie('*.tif', framestep, timevector, dataname,assay(6));
        if(isnan(movobj) || ~movobj)
          cd ../;
          continue;
        end;
        data(i) = movobj; %data structure with all movie information
        moviefilename = sprintf('%s/%s.avi', save_directory,dataname);
        if(writeoptions(4)) data(i).write_movie(moviefilename); end%write out movie as an avi file
        i = i+1;
        cd ../
      end
      cd ../;
    end
    cd ../;

    %Initialize analysis matrices, len, growth_rate, and raw
    len = cell(length(timevector)+1,size(data,2)+1);
    len{1,1} = 'Time (min)';
    len(2:length(timevector)+1,1) = num2cell(timevector);
    growth_rate = cell(length(timevector)+1,size(data,2)+1);
    growth_rate{1,1} = 'Time (min)';
    growth_rate(2:length(timevector)+1,1) = num2cell(timevector);
    raw = cell(length(timevector)+1,size(data,2)+1);
    raw{1,1} = 'Time (min)';
    raw(2:length(timevector)+1,1) = num2cell(timevector);
    
    %store data in each directory from each movie object
    for i=2:length(data)+1
      if(isnan(data(i-1)))
        continue; 
      end;
      matrix = data(i-1).get_data;
      len(2:length(matrix(:,2))+1,i) = num2cell(matrix(:,2));
      len(1,i) = cellstr(data(i-1).id);
      growth_rate(2:length(matrix(:,3))+1,i) = num2cell(matrix(:,3));
      growth_rate(1,i) = cellstr(data(i-1).id);
      raw(2:length(matrix(:,4))+1,i) = num2cell(matrix(:,4));
      raw(1,i) = cellstr(data(i-1).id);
    end
    
    %compute summary statistics on combined movie objects, mean and stderr
    average(:,1) = timevector;
    stderr(:,1) = timevector;
    for i=1:length(timevector)
      average(i,d0-1) = nanmean([raw{i+1,2:size(data,2)+1}]);
      stderr(i,d0-1) = nanstd([raw{i+1,2:size(data,2)+1}])/sqrt(size(data,2));
    end
    rawdataname = [tag,'_',genotype_name,'_raw.csv'];
    lendataname = [tag,'_',genotype_name,'_len.csv'];
    grdataname = [tag,'_',genotype_name,'_gr.csv'];
    if(writeoptions(1)) cellwrite(rawdataname,raw); end
    if(writeoptions(2)) cellwrite(lendataname,len); end
    if(writeoptions(3)) cellwrite(grdataname,growth_rate); end
    raw = average;
    len = stderr;
    growth_rate = names;
  end
end
